---
export interface Props {
	duration?: number;
}

let { duration } = Astro.props;
duration = duration || 500;
---

<script defer define:vars={{ duration }}>
	function animate() {
		document.documentElement.classList.add('is-leaving');
	}

	/**
	 * @param { MouseEvent | PointerEvent } e
	 */
	function handleLoad(e) {
		let action;
		let target;
		let no_transition = false;
		const path = e.path || (e.composedPath && e.composedPath());
		for (let element of path) {
			if (! action) {
				if (element.tagName == 'A') {
					action = (element) => document.location.href = element.href;
					target = element;
				}
				else if (element.tagName == 'FORM') {
					action = (element) => element.submit();
					target = element;
				}
			}
			if(action || element == target) {
				no_transition = no_transition || (element.classList && element.classList.contains('no-transition'));
			}
		}
		if (! no_transition) {
			e.preventDefault();
			animate();
		}
	}

	document.addEventListener('DOMContentLoaded', () => {
		if (performance.getEntries()[0].type == 'reload')
			document.documentElement.classList.add('is-refreshed');
		/*
		for (let a of document.getElementsByTagName("a")) {
			a.addEventListener('click', handleLoad, false);
		}
		for (let form of document.getElementsByTagName("form")) {
			form.addEventListener('submit', handleLoad);
		}

		setTimeout(() => {
			if (performance.getEntries()[0].type == 'reload')
				document.documentElement.classList.add('is-refreshed');
			else
				document.documentElement.classList.add('is-loaded');
		}, 50);
		*/
	});
	
</script>
<style is:global define:vars={{ duration }}>
	html.is-loaded .transition-fade {
		transition: 500ms;
		opacity: 1;
	}

	html.is-refreshed .transition-fade {
		transition: 0;
		opacity: 1;
	}

	html.is-leaving .transition-fade {
		opacity: 0;
	}

	.transition-fade {
		opacity: 0;
	}
</style>
