---
export interface Props {
	duration?: number;
}

let { duration } = Astro.props;
duration = duration || 500;
---

<script define:vars={{ duration }}>
	function animate() {
		for (let h of document.getElementsByTagName('html')) {
			h.classList.add('is-leaving');
		}
	}

	/**
	 * @param { MouseEvent | PointerEvent } e
	 */
	function handleLoad(e) {
		e.preventDefault();
		animate();
		setTimeout(
			(e) => {
				console.log('redirecting to', e.path);
				for (let element of e.path) {
					if (element.tagName == 'A') {
						document.location.href = element.href;
						break;
					}
					else if (element.tagName == 'FORM') {
						element.submit();
						break;
					}
				}
			}, duration, e);
	}

	document.addEventListener('DOMContentLoaded', () => {
		for (let a of document.getElementsByTagName("a")) {
			a.addEventListener('click', handleLoad, false);
		}
		for (let form of document.getElementsByTagName("form")) {
			form.addEventListener('submit', handleLoad);
		}
		for (let h of document.getElementsByTagName('html')) {
			if (performance.getEntries()[0].type == 'reload')
				h.classList.add('is-refreshed');
			else
				h.classList.add('is-loaded');
			
		}
	});
</script>
<style is:global define:vars={{ duration }}>
	html.is-loaded .transition-fade {
		transition: 500ms;
		opacity: 1;
	}

	html.is-refreshed .transition-fade {
		transition: 0;
		opacity: 1;
	}

	html.is-leaving .transition-fade {
		opacity: 0;
	}

	.transition-fade {
		opacity: 0;
	}
</style>
