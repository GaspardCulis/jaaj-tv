---
export interface Props {
	duration?: number;
}

let { duration } = Astro.props;
duration = duration || 500;
---

<script define:vars={{ duration }}>
	function animate() {
		for (let h of document.getElementsByTagName('html')) {
			h.classList.add('is-leaving');
		}
	}

	/**
	 * @param { MouseEvent } e
	 */
	function handleLoad(e) {
		e.preventDefault();
		animate();
		setTimeout(
			(e) => {
				if (e.target.tagName == 'A') 
					document.location.href = e.target.href;
				else if (e.target.tagName == 'FORM') 
					e.target.submit();
			}, duration, e);
	}

	document.addEventListener('DOMContentLoaded', () => {
		for (let a of document.getElementsByTagName("a")) {
			a.addEventListener('click', handleLoad);
		}
		for (let form of document.getElementsByTagName("form")) {
			form.addEventListener('submit', handleLoad);
		}
		for (let h of document.getElementsByTagName('html')) {
			if (performance.getEntries()[0].type == 'reload')
				h.classList.add('is-refreshed');
			else
				h.classList.add('is-loaded');
			
		}
	});
</script>
<style is:global define:vars={{ duration }}>
	html.is-loaded .transition-fade {
		transition: 500ms;
		opacity: 1;
	}

	html.is-refreshed .transition-fade {
		transition: 0;
		opacity: 1;
	}

	html.is-leaving .transition-fade {
		opacity: 0;
	}

	.transition-fade {
		opacity: 0;
	}
</style>
