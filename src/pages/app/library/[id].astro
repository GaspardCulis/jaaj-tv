---
import App from "../../../layouts/App.astro";
import { getCachedMovieById } from "../../../model/database";
import UserManager from "../../../model/usermanager";
import { isAuthorized } from "../../../model/utils";
import tnp from 'torrent-name-parser';

const authorized = isAuthorized(Astro.request);
if (!authorized) return Astro.redirect("/login");

const { id } = Astro.params;

const user = await UserManager.getUser(authorized as string)

const movie = user.getLibrary().getMovies().get(parseInt(id as string));
if (!movie) return new Response("Movie not found", { status: 404 });

const files = user.getLibrary().getTorrentInfo(movie.id).files.map((file) => {
    const parsed = tnp(file);
    return {
    path: file,
    name: parsed.title,
    season: parsed.season,
    episode: parsed.episode,
    episodeName: parsed.episodeName,
  };
});

if (!movie) return new Response("Movie not found", { status: 404 });
---

<App title="jaajTV | Search" selected_index={1}>
    <link href="https://vjs.zencdn.net/7.20.3/video-js.css" rel="stylesheet" />
    <div id="movie-page" class="vbox slide-transition no-scroll">
        <section id="top-section">
            <img src={movie.image} alt={movie.baseName} onerror="this.onerror=null;this.src='/assets/placeholder.jpg'"/>
            <div id="movie-info" class="vbox">
                <header class="hbox" style="margin-bottom: 50px;">
                    <div class="title-container">
                        <h1>{movie.title || movie.baseName}</h1>
                        <a href={movie.url}><h2>{movie.baseName}</h2></a>
                    </div>
                    <a href="/app/library" id="close-button">
                        <img src="/assets/close.svg" alt="close" id="close-icon"/>
                    </a>
                </header>
                <section id="files-section">
                    <div class="hbox full-width align-center">
                        <h3>Files :</h3>
                        <a id ="manage-button" href={`/app/search/${id}`} onclick="document.getElementById('movie-page').classList.remove('slide-transition'); document.getElementById('movie-info').classList.add('fade-transition');">[ Manage files ]</a>
                    </div>
                    <div class="files-container">

                    </div>
                    <button id="watch-button" class="hidden">Watch</button>
                </section>
            </div>
        </section>
        <div class="separator-line"></div>
        <section id="bottom-section">
            <h2 id="episode-title"></h2>
            <div class="video-container">
                <video
                    id="my-video"
                    class="video-js"
                    width="640"
                    height="264"
                    controls
                    preload="auto"
                    poster={movie.image}
                    data-setup="{}"
                    style="margin-bottom: 50px;"
                >
                </video>
            </div>
            
        </section>
    </div>
    <script src="/src/@widgetjs/tree/tree.min.js" type="text/javascript" is:inline />
    <script src="https://vjs.zencdn.net/7.20.3/video.min.js"></script>
    <script defer define:vars={{id, movie, files}}>
        var fileTree;

        function parseFiles(files, parentName = "") {
            const  treeData = [];
            const ids = []
            for (const file of files) {
                const path = file.path.replace(parentName, '').split("/");
                const id = file.path;
                if (ids.includes(id)) continue;
                const newNode = {
                    id: id,
                    text: `${file.name || file.path}${file.season ? ` S${file.season}` : ""}${file.episode ? `E${file.episode}` : ""}${file.episodeName ? ` - ${file.episodeName}` : ""}`,
                    children: [],
                    attributes: {
                        type: null,
                    }
                };
                if (path.length > 1) {
                    const folder = path[0];
                    newNode.attributes.type = "folder";
                    newNode.children = parseFiles(files.filter((v) => v.path.startsWith(newNode.id + '/')), parentName + folder + '/');
                } else {
                    newNode.attributes.type = "file";
                }
                treeData.push(newNode);
                ids.push(id);
            }

            return treeData;
        }

        var old_selected_id = null;
        document.addEventListener("DOMContentLoaded", () => {
            fileTree = new Tree(".files-container", {
                data: parseFiles(files),
                onChange: () => {
                    if (fileTree.values.includes(old_selected_id))
                        fileTree.values = fileTree.values.filter((v) => v !== old_selected_id);
                    old_selected_id = fileTree.values[0];
                    if (fileTree.values.length === 1) {
                        document.getElementById("watch-button").classList.remove("hidden");
                    } else {
                        document.getElementById("watch-button").classList.add("hidden");
                    }
                }
            });
            document.getElementById("watch-button").addEventListener("click", () => {
                const url = `/api/library/video?movie_id=${id}&file_path=${fileTree.values[0]}`
                if (typeof videojs !== 'undefined') {
                    const player = videojs(document.querySelector('.video-js'));
                    player.src({
                        src: `/api/library/video?movie_id=${id}&file_path=${fileTree.values[0]}`,
                        type: 'video/mp4'
                    });
                    setTimeout(() => {
                        player.play();
                    }, 1000);
                } else {
                    const video = document.getElementsByTagName("video")[0];
                    const source = document.createElement("source");
                    source.src = `/api/library/video?movie_id=${id}&file_path=${fileTree.values[0]}`;
                    source.type = "video/mp4";
                    video.innerHTML = "";
                    video.appendChild(source);
                    video.load();
                    setTimeout(() => {
                        video.play();
                    }, 1000);
                }
                // Names
                document.getElementById("episode-title").innerText = fileTree.selectedNodes[0].text;
                // Animation
                const el = document.getElementById("movie-page");
                el.classList.remove("no-scroll");
                // Scroll to bottom smoothly
                setTimeout((el) => {
                    el.scrollTo({
                        top: el.scrollHeight,
                        behavior: "smooth"
                    });
                }, 100, el);
            });
        });
    </script>
    <style>
        #top-section {
            min-height: 100%;
            width: 100%;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

        #movie-page {
            height: 100%;
            width: 100%;
            background-color: whitesmoke;

            overflow-y: scroll;
            scrollbar-width: none;
            scrollbar-color: transparent transparent;
            -ms-overflow-style: none;
            overflow-y: scroll;
        }

        #movie-page.no-scroll {
            overflow-y: hidden;
        }

        #movie-page::-webkit-scrollbar {
            display: none;
        }

        #movie-page::-moz-scrollbar {
            display: none;
        }
        

        html.is-leaving #movie-page.slide-transition {
            transform: translateY(100%);
            transition: transform 0.5s ease-in-out;
        }

        html.is-leaving #movie-info.fade-transition {
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }

        #movie-page img {
            height: 100%;
            object-fit: contain;
        }

        #movie-info {
            height: 100%;
            width: 100%;
            padding-top: 1rem;
            padding-left: 3rem;
        }
    
        #movie-info header {
            width: 100%;
            justify-content: space-between;
        }
    
        #close-button {
            min-width: 2rem;
            min-height: 2rem;
            margin-right: 1rem;
        }
    
        #close-icon {
            height: 2rem;
            width: 2rem;
            cursor: pointer;
        }

        #watch-button {
            padding-block: 0.5rem;
            margin-top: 1rem;
            background-color: #1e88e5;
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
            cursor: pointer;
            margin-inline: auto;
            transition: transform 500ms;
            transform: rotateX(0deg);
        }

        #watch-button:hover {
            background-color: #1565c0;
        }

        #watch-button.hidden {
            transform: rotateX(90deg);
        }
    
        .title-container {
            display: flex;
            flex-direction: column;
        }
    
        .title-container a {
            color: inherit;
            text-decoration: none;
        }

        .title-container h1 {
            font-size: 2.5rem;
            margin-bottom: 0;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0s;
        }
    
        .title-container h2 {
            font-size: 1rem;
            margin-block: 0;
            margin-left: 0.5rem;
            color: gray;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0.2s;
        }
    
        .title-container a:hover h2 {
            text-decoration: underline;
        }

        #manage-button {
            color: #007bff;
            text-decoration: none;
            font-size: 1rem;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0.4s;
            margin-block: auto;
            margin-left: 1rem;
        }

        #manage-button:hover {
            text-decoration: underline;
        }

        .separator-line {
            min-height: 2px;
            width: 100%;
            background-color: black;
            margin-block: 3rem;
        }

        .video-container {
            height: 100%;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
    </style>
</App>