---
import TextField from "../../../components/TextField.astro";
import App from "../../../layouts/App.astro";
import { getCachedMovieById } from "../../../model/database";
import { isAuthorized } from "../../../model/utils";

if (!isAuthorized(Astro.request)) return Astro.redirect("/login");

const { id } = Astro.params;

const movie = getCachedMovieById(parseInt(id + ""));

if (!movie) return new Response("Movie not found", { status: 404 });

const important_properties = ["episode","season","language", "quality", "resolution", "year"];
---
<App title="jaajTV | Search" selected_index={0}>
    <div id="movie-page" class="hbox">
        <img src={movie.image} alt={movie.baseName} onerror="this.onerror=null;this.src='/assets/placeholder.jpg'"/>
        <div id="movie-info" class="vbox">
            <header class="hbox" style="margin-bottom: 50px;">
                <div class="title-container">
                    <h1>{movie.title || movie.baseName}</h1>
                    <a href={movie.url}><h2>{movie.baseName}</h2></a>
                </div>
                <a href="/app/search" id="close-button">
                    <img src="/assets/close.svg" alt="close" id="close-icon"/>
                </a>
            </header>
            <div class="info-container">
                <h2>Informations :</h2>
                <ul>
                    {important_properties.map((prop) => {
                        if (movie[prop]) {
                            return <li style="opacity: 0; animation: fadeIn 0.5s ease-in-out forwards 0.6s;"><b>{prop}:</b> {movie[prop]}</li>
                        }
                    })}
                </ul>
            </div>
            <div id="files">
                <h2>Files :</h2>
                <div class="files-container">

                </div>
                <div class="download-button-container">
                    <TextField placeholder="Folder name" type="text" name="folder_name" required/>
                    <button id="download-button"><p>Add to library</p></button>
                </div>
            </div>
        </div>
    </div>
    <script src="/src/@widgetjs/tree/tree.min.js" type="text/javascript" is:inline />
    <script defer define:vars={{id, movie}}>
        var fileTree;

        let REMOTE_FILES = [];
        let CAN_DOWNLOAD = false;
    
        function setupFolderName() {
            let folder_name = movie.title || movie.baseName;
            if (movie.season) 
                folder_name += " Season " + movie.season;
            if (movie.episode)
                folder_name += " Episode " + movie.episode;
    
            document.getElementById("folder_name").value = folder_name;
        }
    
        async function getMovieFiles() {
            const response = await fetch("/api/files", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ movie_id: id }),
            });
    
            if (response.status !== 200) {
                console.error("Error while fetching files");
                return;
            }
            const files = (await response.json()).files;

            const parsed = parseFiles(files.map((f) => {f.path = f.path.replace(/\\/g, '/'); return f;}));
            for (const node of parsed) node.checked = true;
            
            fileTree = new Tree('.files-container', {
                data: parsed,
                onChange: () => {;
                    updateDownloadButton();
                }
            });
            fileTree.options.onChange();
        }
    
        // Thanks to https://stackoverflow.com/a/20732091/16994743
        function humanFileSize(size) {
            var i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));
            return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
        }
    
        function parseFiles(files, parentName = "") {
            const  treeData = [];
            const ids = []
            for (const file of files) {
                const path = file.path.replace(parentName, '').split("/");
                const id = parentName + path[0];
                if (ids.includes(id)) continue;
                const newNode = {
                    id: id,
                    text: path[0] + (path.length === 1 ? ` (${humanFileSize(file.length)})` : ""),
                    children: [],
                    attributes: {
                        type: null,
                        size: file.length,
                    }
                };
                if (path.length > 1) {
                    const folder = path[0];
                    newNode.attributes.type = "folder";
                    newNode.children = parseFiles(files.filter((v) => v.path.startsWith(newNode.id + '/')), parentName + folder + '/');
                } else {
                    newNode.attributes.type = "file";
                }
                treeData.push(newNode);
                ids.push(id);
            }

            return treeData;
        }
    
        function getTotalFileSize(selectedNodes) {
            let totalSize = 0;
            for (const node of selectedNodes) {
                if (node.attributes.type === 'file') {
                    totalSize += node.attributes.size;
                }
            }
    
            return totalSize;
        }
    
        function updateDownloadButton() {
            if (!fileTree) return;
            CAN_DOWNLOAD = true;
            const selectedNodes = fileTree.selectedNodes;
            const totalSize = getTotalFileSize(selectedNodes);
            let message = `Add to library (${humanFileSize(totalSize)})`;
            const downloadButton = document.getElementById("download-button");
            downloadButton.classList.remove("clicked");


            const exists = REMOTE_FILES.length > 0;
            if (exists) {
                const new_files = fileTree.values.filter((v) => !REMOTE_FILES.includes(v));
                const new_size = getTotalFileSize(selectedNodes.filter((v) => new_files.includes(v.id)));
                const files_to_remove = REMOTE_FILES.filter((v) => !fileTree.values.includes(v));
                if (new_files.length > 0) {
                    message = `Add ${new_files.length} new file${new_files.length > 1 ? 's' : ''} (${humanFileSize(new_size)})`;
                    if (files_to_remove.length > 0) {
                        message += ` and remove ${files_to_remove.length} file${files_to_remove.length > 1 ? 's' : ''}`;
                    }
                } else if (files_to_remove.length > 0) {
                    message = `Remove ${files_to_remove.length} file${files_to_remove.length > 1 ? 's' : ''} from library`;
                } else {
                    message = "No changes";
                    CAN_DOWNLOAD = false;
                    downloadButton.classList.add("clicked");
                }
            }
    
            const downloadButtonText = document.getElementById("download-button").getElementsByTagName("p")[0];
            downloadButtonText.innerText = message;
        }

        function parseSelectedNodes(selectedNodes) {
            const files = [];
            for (const node of selectedNodes) {
                if (node.attributes.type === 'file') {
                    files.push(node.id);
                }
            }
            
            return files;
        }
    
        async function onDownloadButtonPressed() {
            if (!CAN_DOWNLOAD) return;
            CAN_DOWNLOAD = false;
            // Animation
            const downloadButton = document.getElementById("download-button");
            const downloadButtonText = downloadButton.getElementsByTagName("p")[0];
            // Lock width and height
            const rect = downloadButton.getBoundingClientRect();
            downloadButton.style.minWidth = rect.width + "px";
            downloadButton.style.height = rect.height + "px";
            // Remove text
            downloadButtonText.classList.add("hidden");
            // Animate
            downloadButton.classList.add("clicked");
            const animationWait = new Promise((resolve) => setTimeout(resolve, 500));
    
            // Fetching
            const selectedFiles = parseSelectedNodes(fileTree.selectedNodes);
            const folderNameInput = document.getElementById("folder_name");
            folderNameInput.disabled = true;
            
            const response = await fetch("/api/download", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ movie_id: id, files: selectedFiles, folder_name:  folderNameInput.value}),
            });
    
            await animationWait;
            const backgroundBackup = downloadButton.style.backgroundImage;
            if (response.status === 200) {
                const only_deletes = selectedFiles.filter((v) => !REMOTE_FILES.includes(v)).length === 0;

                downloadButtonText.classList.remove("hidden");
                const deleted_files = REMOTE_FILES.filter((v) => !selectedFiles.includes(v));
                REMOTE_FILES = REMOTE_FILES.length > 0 ? selectedFiles.filter((v) => !deleted_files.includes(v)) : selectedFiles;
                
                if (only_deletes) {
                    downloadButtonText.innerText = "Removed from library";
                    CAN_DOWNLOAD = true;
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                    setupFileTree();
                } else {
                    if (deleted_files.length === 0) {
                        downloadButtonText.innerText = "Added to library";
                    } else {
                        downloadButtonText.innerText = "Updated library";
                    }
                    setupProgressAnimation();
                }
                downloadButton.style.minWidth = "";
                downloadButton.style.height = "";
            } else {
                downloadButton.style.backgroundImage = "linear-gradient(to left, rgb(0, 167, 0) 50%, red 50%)";
                downloadButton.classList.remove("clicked");
                downloadButtonText.innerText = "Error";
                downloadButtonText.classList.remove("hidden");
    
                setTimeout(async () => {
                    downloadButton.style.backgroundImage = "linear-gradient(to left, red 50%, #2691d9 50%)";
                    const transitionBackup = downloadButton.style.transition;
                    downloadButton.style.transition = "none";
                    downloadButton.classList.add("clicked");
                    downloadButtonText.classList.add("hidden");
                    await new Promise((resolve) => setTimeout(resolve, 500));
                    downloadButton.style.transition = transitionBackup;
                    downloadButton.classList.remove("clicked");
                    fileTree.options.onChange();
                    downloadButtonText.classList.remove("hidden");
                    await new Promise((resolve) => setTimeout(resolve, 500));
                    downloadButton.style.backgroundImage = backgroundBackup;
                    downloadButton.style.minWidth = "";
                    downloadButton.style.height = "";
                    folderNameInput.disabled = false;
                    CAN_DOWNLOAD = true;
                }, 3000);
            }
    
        }
    
        async function setupDownloadButton() {
            const response = await fetch("/api/library/exists", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ movie_id: id }),
            });
    
            if (response.status !== 200) {
                console.error("Failed to check if movie is in library");
                return;
            }
            const data = (await response.json());
            const downloadButton = document.getElementById("download-button");
            const downloadButtonText = downloadButton.getElementsByTagName("p")[0];
            if (data.exists) {
                const folderNameInput = document.getElementById("folder_name");
                downloadButtonText.innerText = "Added to library";
                downloadButton.style.transition = "none";
                downloadButton.classList.add("clicked");
                folderNameInput.disabled = true;
                folderNameInput.value = data.folder_name;
                setupProgressAnimation();
                REMOTE_FILES = data.files;
                setupFileTree();
            } else {
                downloadButton.addEventListener("click", onDownloadButtonPressed);
            }
        }

        function setupProgressAnimation() {
            const textField = document.getElementsByClassName("txt_field")[0];
            const span = textField.querySelector("span");
            span.style.setProperty("--color", "rgb(255, 136, 0)");
            span.style.setProperty('--progress', '0%');

            const interval = setInterval(async (span) => {
                console.log("Fetching progress");
                const response = await fetch("/api/library/progress", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ movie_id: id}),
                }).catch((err) => {
                    console.error("Failed to fetch progress");
                    clearInterval(interval);
                });
                const data = await response.json().catch((e) => {
                    clearInterval(interval);
                });
                let progress = data.progress;
                if (data.downloaded) {
                    progress = 1;
                    span.style.setProperty("--color", "rgb(0, 167, 0)");
                    clearInterval(interval);
                    setupFileTree();
                    updateDownloadButton();
                    CAN_DOWNLOAD = true;
                }
                span.style.setProperty('--progress', Math.round(progress * 100) + '%');
            }, 1000, span);
        }

        function setupFileTree() {
            Object.values(fileTree.liElementsById).map((li) => li.getElementsByClassName("treejs-checkbox")[0].classList.remove("downloaded"));
            fileTree.values = REMOTE_FILES;
            for (const file of REMOTE_FILES) {
                const element = fileTree.liElementsById[file].getElementsByClassName("treejs-checkbox")[0];
                element.classList.add("downloaded");
            }
        }
        
        document.addEventListener("DOMContentLoaded", async () => {
            setupFolderName();
            await getMovieFiles();
            await setupDownloadButton();
            document.getElementById("download-button").addEventListener("click", onDownloadButtonPressed);
        });
    </script>
    <style>
        #movie-page {
            height: 100%;
            width: 100%;
            background-color: whitesmoke;
        }
    
        html.is-leaving #movie-page {
            transform: translateY(100%);
            transition: transform 0.5s ease-in-out;
        }
    
        #movie-page img {
            height: 100%;
            object-fit: contain;
        }
    
        #movie-info {
            height: 100%;
            width: 100%;
            padding-top: 1rem;
            padding-left: 3rem;
            justify-content: space-between;
        }
    
        #movie-info header {
            width: 100%;
            justify-content: space-between;
        }
    
        #close-button {
            width: 2rem;
            height: 2rem;
            margin-right: 1rem;
        }
    
        #close-icon {
            height: 2rem;
            width: 2rem;
            cursor: pointer;
        }
    
        .title-container {
            display: flex;
            flex-direction: column;
        }
    
        .title-container a {
            color: inherit;
            text-decoration: none;
        }
    
        .title-container h1 {
            font-size: 2.5rem;
            margin-bottom: 0;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0s;
        }
    
        .title-container h2 {
            font-size: 1rem;
            margin-block: 0;
            margin-left: 0.5rem;
            color: gray;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0.2s;
        }
    
        .title-container a:hover h2 {
            text-decoration: underline;
        }
    
        .info-container h2 {
            font-size: 1.5rem;
            margin-block: 0;
            margin-left: 0.5rem;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0.4s;
        }
    
        #files {
            width: 95%;
            height: fit-content;
            margin-bottom: 50px;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards 0.8s;

            overflow-y: scroll;
            scrollbar-width: none;
            scrollbar-color: transparent transparent;
            -ms-overflow-style: none;
            overflow-y: scroll;
        }

        #files::-webkit-scrollbar {
            display: none;
        }

        #files::-moz-scrollbar {
            display: none;
        }
    
        #files .files-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            border: 1px solid gray;
            border-radius: 5px;
            min-height: 10rem;
        }
    
        .download-button-container {
            display: flex;
            flex-direction: row;
            justify-content: right;
            align-items: right;
            width: 100%;
        }
    
        #download-button {
            border: 1px solid;
            padding-inline: 10px;
            padding-block: 5px;
            margin-inline: 10px;
            margin-block: auto;
    
            min-width:max-content;
            
            background-size: 200% 100% ;
            background-image: linear-gradient(to left, rgb(0, 167, 0) 50%, #2691d9 50%);
            transition: all 500ms;
    
            border-radius: 25px;
            font-size: 18px;
            color: #e9f4fb;
            font-weight: 700;
            cursor: pointer;
            outline: none;
            text-align: center;
            user-select: none;
    
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        }
    
        #download-button.clicked {
            background-position: -100% 0;
        }
    
        #download-button p {
            margin: 0;
            transition: all 0.5s;
        }
    
        #download-button p.hidden {
            transform: scaleY(0);
        }
    
    
        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
    </style>
    <style is:global>
        li.treejs-node__checked > span.treejs-checkbox.downloaded::before {
            background-color: rgb(0, 167, 0) !important;
            border-color: rgb(0, 167, 0) !important;
        }
        li:not(.treejs-node__checked) > span.treejs-checkbox.downloaded {
            background-color: red;
            border-color: red;
            border-radius: 2px;
            width: 18px;
            height: 18px;
        }
        li:not(.treejs-node__checked) > span.treejs-checkbox.downloaded::before {
            transition: none;
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-100%, -50%) rotate(45deg);
            width: 0.6rem;
            height: 0.6rem;
            border: 3px solid white;
            border-bottom: none;
            border-left: none;
        }
        li:not(.treejs-node__checked) > span.treejs-checkbox.downloaded:hover::before {
            box-shadow: none;
        }

        li:not(.treejs-node__checked) > span.treejs-checkbox.downloaded::after {
            /* Cross */
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(0%, -50%) rotate(45deg);
            width: 0.6rem;
            height: 0.6rem;
            border: 3px solid white;
            border-top: none;
            border-right: none;
        }
    </style>
</App>